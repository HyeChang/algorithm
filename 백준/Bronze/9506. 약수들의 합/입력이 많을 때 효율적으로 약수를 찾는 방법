* 일반적으로 10의 약수를 찾는다고 하면 1 ~ 10 까지의 숫자 중에서 각 수로 나누었을때(%) 0으로 나누어 떨어지게 하는 수를 찾는 알고리즘을 생각할 수 있다.

이 때 시간 복잡도를 구하면 O(N)의 시간 복잡도를 가지게 된다.
따라서 M이 약 10억 이상의 입력을 받게된다면 빠른 속도를 요구하는 문재에선 시간초과 라는 문제가 발생한다.

따라서 많은 수의 처리를 위해서 
다음과 같은 방식을 고려해 보아야 한다.

1. N의 약수를 구할때 1부터 N의 제곱근 까지의 수만 0으로 나누어 떨어지는지 확인
2. 나누어 떨어지는 숫자들을 가지고 (입력 수) / (0으로 나누어 떨어지는 수) 로 나머지 약수 확인
ex) 입력(N)이 100일때
1번. 
100 % 1 = 0
100 % 2 = 0
100 % 3 = 1
100 % 4 = 0
100 % 5 = 0
100 % 6 = 4
100 % 7 = 2
100 % 8 = 4
100 % 9 = 1
100 % 10 = 0

=> 1, 2, 4, 5, 10

2번. 
100 / 1 = 100
100 / 2 = 50
100 / 4 = 25
100 / 5 = 20
100 / 10 = 10

따라서 100의 약수는 1, 2, 4, 5, 10, 20, 25, 50, 100
이때 시간 복잡도는 O(√N)이므로 10억의 입력이 들어와도 약 3만번의 연산으로 해결 가능하다.

** 다만 추가로 처리 해줘야 하는 상황이 발생 할 수 있다.
1. 중복제거 필요
2. 오름차순 및 내림차순 정렬이 필요할 경우 재 정렬 로직이 필요하다.
